<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  <mapper namespace="mapperInterface.UserMapper">
  
  <!--  
** interface 를 통해 ~Mapper 접근
=> interface ~Mapper.java 의 패키지명 & 화일명과  
   ~Mapper.xml 의 패키지명 & 화일명 & namespace 값은 같아야됨. 
   
=> namespace: 자바클래스에서 maper 를 찾는 경로
           다른 mapper와 중복되지 않도록 네임스페이스 기재   

*** mapper 기본사항 
1) #{id} : parameter 로 전달된 vo 의 id 라는 컬럼의 value 가 전달됨  
         -> getId() 로 처리함, Map의 경우 키값이 id 인 값을 찾음    
2) ${id} : id 라는 필드 표현 
         
3) CDATA : XML에서는  <,>등 비교연산자의 경우 XML규칙상 에러 나기때문에,
         이기호를 연산자로 인식하도록 하기 위해서는 SQL문을 CDATA로 묶어 주어야 한다.
         <![CDATA[ SELECT * FROM table WHERE id > 1 ]]>
         
4) 조건문, 반복문, include, selectKey 등          
-->

<!-- ** 반복문 : Member Check List 
=> select * from member where lev in ('A','B','C') order by id asc (추천)
   select * from member where lev='A' OR lev='B' OR lev='C' order by id asc (비추)
=> mapper 에 반복문 적용하기 : <foreach..... 
   비교 Java for : for ( String lev : levArr )   
   
=> mapper foreach 기본형식
   <foreach ...index="index"..>   
              ...... "${index}" : index 값 사용하기 
                      사용하지 않는경우 아래처럼 표시해도 되고, 생략해도됨.
   <foreach .... index="" open="(" close=")" separator=",">     
         
=> collection : list 또는 array Type 의 매개변수 (vo에 정의된 변수 사용)   
   item : collection 의  데이터 를 1건씩 전달 받으며 위의 구문을 완성함.    
   index : 필요시 사용,  0 부터 시작 (0,1,2...)  
-->

<!-- <select id="checkList" resultType="vo.MemberVO">
	select * from member 
	where jno in 
	<foreach collection="check" item="it" open="(" close=")" separator=",">
		#{it}
	</foreach>	
	order by jno asc, id asc
</select>



	*************************************
-->
		
	<sql id="search">
		<if test="keyword!=null">
			<bind name="keyVal" value="'%' + keyword + '%'"/>
		</if>
		<choose>
			<when test="searchType=='i'.toString()">
				and id like #{keyVal} )
			</when>
			<when test="searchType=='na'.toString()">
				and name like #{keyVal} )
			</when>
			<when test="searchType=='in'.toString()">
				and id like #{keyVal}
				or name like #{keyVal} )
			</when>
			<otherwise> ) </otherwise>
		</choose>
	</sql>
	
	<select id="searchCount" resultType="int">
		select count(*) from user
		where ( id != "admin" <include refid="search"></include>
	</select> 
	<select id="searchList" resultType="vo.UserVO">
		select * from user 
		where ( id != "admin" <include refid="search"></include>
		order by id asc
		limit #{sno}, #{rowsPerPage}
	</select>


  	<select id="selectList" resultType="vo.UserVO">
  	select * from user
	</select>
	
  	<select id="selectOne" resultType="vo.UserVO">
  		select * from user where id = #{id} 
  	</select>
  	
  	<insert id="insert">
  		insert into user values(#{id},#{password},#{name},
  		#{birthday},#{gender},#{phonenum},#{uploadfile} )
  	</insert>
	
	<update id="update">
		update user set  name=#{name}, birthday=#{birthday}, 
		gender=#{gender}, phonenum=#{phonenum}, uploadfile=#{uploadfile}  where id=#{id}
	</update>
	
	<update id="pwupdate">
		update user set password=#{password} where id=#{id}
	</update>
	
  	<delete id="delete">
  		delete from user where id = #{id}
  	</delete> 
  	
  	
  </mapper>

